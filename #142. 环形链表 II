说实话这个有点烧脑子， 双指针参悟了一天也没进度。脑子真心不够用

首先想到的是暴力破解，遍历每个对象取地址，如果有指向之前的则直接返回即可
```python
# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution:
    def detectCycle(self, head: Optional[ListNode]) -> Optional[ListNode]:
        newHead = ListNode(next=head)
        objs = {}
        tmp2 = newHead.next
        while(tmp2 != None):
            key = str(id(tmp2))
            if key in objs:
                return tmp2
            objs[key] = True
            tmp2 = tmp2.next

        return None
```


解法2 双指针遍历
说实话，确实是脑子不够用
```python
# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution:
    def detectCycle(self, head: Optional[ListNode]) -> Optional[ListNode]:
        head = ListNode(next=head)
        fast = slow = head
        
        while(True):
            for tmp in range(2):
                fast = fast.next
                if(fast == None):
                    return None
            slow = slow.next
            if(slow == None):
                return None
            if(fast == slow):
                break
        
        fast = head
        while(True):
    
            fast = fast.next
            slow = slow.next
            if(fast == slow):
                return fast

        return None
```
